buildscript {
    // gradle 脚本自身需要使用的资源
    repositories {
        maven {
            url maven_url
        }
    }
    dependencies {
        // gradle-docker 插件
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.9.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'application'
}
apply plugin: 'docker'

// 此处不能写com.sherlocky了，因为dockerhub的用户名是sherlocky
group = 'sherlocky'
version = application_version
mainClassName = 'com.sherlocky.halo.HaloEsApplication'

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'utf-8'

//设置jdk的版本
sourceCompatibility = 1.8
targetCompatibility = 1.8

/**
 // 生成启动脚本并打包
 def appMainClass = 'com.sherlocky.job.Application'
 apply plugin: 'application'
 mainClassName = appMainClass
 */

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// 项目自身需要的资源
repositories {
    /* mavenCentral() */
    maven {
        url maven_url
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // 模板引擎 Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // redis starter
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // 使用springboot默认的lettuce redis客户端，依赖commons-pool2
    implementation 'org.apache.commons:commons-pool2:2.6.0'
    // session on redis
    implementation 'org.springframework.session:spring-session-data-redis'

    // elasticsearch
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    // 此处版本要和ES服务端一致，不然可能连接不上
    /**
     * transport 会自动依赖 6.4.3 版本 org.elasticsearch:elasticsearch，
     * 不可强制覆盖为6.5.4版本，会不兼容，
     * 报错 java.lang.NoSuchFieldError: defaultConnectionProfile
     */
    implementation 'org.elasticsearch.client:transport:6.5.4'

    // mybatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2'
    // 分页插件
    implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:1.2.10'
    // druid
    implementation 'com.alibaba:druid-spring-boot-starter:1.1.10'
    implementation 'mysql:mysql-connector-java:5.1.47'

    // flyway
    implementation 'org.flywaydb:flyway-core:5.2.4'

    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-collections4:4.2'
    implementation 'com.alibaba:fastjson:1.2.62'
    implementation 'cn.hutool:hutool-all:4.4.3'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'junit:junit:4.12'
}

// gradle 构建暂时排除掉单元测试
test {
    exclude '**/*'
}

jar {
    baseName = "halo-elasticsearch"
    version = application_version
}

// 配置docker构建基础信息
distDocker {
    baseImage = "openjdk"
    maintainer = "sherlocky"
}

task dockerBuilder(type: Docker) {
    applicationName = jar.baseName
    tagVersion = jar.version
    volume('/tmp')
    addFile("${jar.baseName}-${jar.version}.jar", "app.jar")
    entryPoint(["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", 'app.jar'])
    exposePort(8080)
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}